// import type { Metadata } from "next";
// import { Inter } from "next/font/google";
// import "./globals.css";

// const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body className={inter.className}>{children}</body>
//     </html>
//   );
// }

'use client'

import './globals.css'

// import type { NextComponentType } from 'next';
// import type { AppContext, AppInitialProps, AppLayoutProps } from 'next/app';

import { useEffect, ReactNode } from 'react';
import Head from 'next/head';
//import { Provider as ReduxProvider } from 'react-redux';
import { CacheProvider } from '@emotion/react';
import { ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';

import { SettingsConsumer, SettingsProvider } from '../contexts/settings-context';
import { AuthConsumer, AuthProvider } from '../contexts/auth/jwt-context';

import { RTL } from '../components/layout/rtl';
import { Toaster } from '../components/toaster';
// import { SplashScreen } from '../components/splash-screen';
import { SettingsButton } from '../components/settings-button';
import { SettingsDrawer } from '../components/settings-drawer';

// import { store } from '../store';
import { createTheme } from '../theme';

import { createEmotionCache } from '../utils/create-emotion-cache';

// import '@aws-amplify/ui-react/styles.css';

// import type { WithAuthenticatorProps } from '@aws-amplify/ui-react';
//import { withAuthenticator } from "@aws-amplify/ui-react";

// import { Amplify } from 'aws-amplify';
// import config from '../amplifyconfiguration.json';

// Amplify.configure(config);

import '../libs/nprogress';
import '../locales/i18n';



const clientSideEmotionCache = createEmotionCache();

import { useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import PropTypes from 'prop-types';
import { useSettings } from '../hooks/use-settings';
import { HorizontalLayout } from '../layouts/dashboard/horizontal-layout';
import { VerticalLayout } from '../layouts/dashboard/vertical-layout';
import { getSections } from '../layouts/dashboard/config';
import { AppProps } from 'next/app';
//import { withAuthGuard } from '../../hocs/with-auth-guard';

const useTranslatedSections = () => {
    const { t } = useTranslation();

    return useMemo(() => getSections(t), [t]);
};

//export const Layout = withAuthGuard((props: AppProps) => {
// export default function RootLayout({
//     children,
// }: Readonly<{
//     children: React.ReactNode;
// }>) {

export default function RootLayout(props: any) {
    const sections = useTranslatedSections();
    const emotionCache = clientSideEmotionCache

    return (


        <html>
            <body>



                <CacheProvider value={emotionCache}>
                    <Head>
                        <title>
                            Sinecta | Quoting System
                        </title>
                        <meta
                            name="viewport"
                            content="initial-scale=1, width=device-width"
                        />
                    </Head>

                    {/* <ReduxProvider store={store}> */}
                    <LocalizationProvider dateAdapter={AdapterDateFns}>
                        <AuthProvider>

                            <AuthConsumer>
                                {(auth) => (
                                    <SettingsProvider>
                                        <SettingsConsumer>
                                            {(settings) => {
                                                // Prevent theme flicker when restoring custom settings from browser storage
                                                if (!settings.isInitialized) {
                                                    return null;
                                                }



                                                const theme: any = createTheme({
                                                    colorPreset: settings.colorPreset,
                                                    contrast: settings.contrast,
                                                    direction: settings.direction,
                                                    paletteMode: settings.paletteMode,
                                                    responsiveFontSizes: settings.responsiveFontSizes
                                                });

                                                // Prevent guards from redirecting
                                                const showSlashScreen = false //!auth.isInitialized;




                                                return (
                                                    <ThemeProvider theme={theme}>
                                                        <Head>
                                                            <meta
                                                                name="color-scheme"
                                                                content={settings.paletteMode}
                                                            />
                                                            <meta
                                                                name="theme-color"
                                                                content={theme.palette.neutral[900]}
                                                            />
                                                        </Head>
                                                        <RTL direction={settings.direction}>
                                                            <CssBaseline />
                                                            <>

                                                                {(() => {

                                                                    if (!auth.isAuthenticated) {
                                                                        return (props.children);
                                                                    }

                                                                    if (settings.layout === 'horizontal') {
                                                                        return (
                                                                            <HorizontalLayout
                                                                                sections={sections}
                                                                                navColor={settings.navColor}
                                                                                {...props} />
                                                                        );
                                                                    }

                                                                    return (
                                                                        <VerticalLayout
                                                                            sections={sections}
                                                                            navColor={settings.navColor}
                                                                            {...props} />
                                                                    );
                                                                })()}



                                                                <SettingsButton onClick={settings.handleDrawerOpen} />
                                                                <SettingsDrawer
                                                                    canReset={settings.isCustom}
                                                                    onClose={settings.handleDrawerClose}
                                                                    onReset={settings.handleReset}
                                                                    onUpdate={settings.handleUpdate}
                                                                    open={settings.openDrawer}
                                                                    values={{
                                                                        colorPreset: settings.colorPreset,
                                                                        contrast: settings.contrast,
                                                                        direction: settings.direction,
                                                                        paletteMode: settings.paletteMode,
                                                                        responsiveFontSizes: settings.responsiveFontSizes,
                                                                        stretch: settings.stretch,
                                                                        layout: settings.layout,
                                                                        navColor: settings.navColor
                                                                    }}
                                                                />
                                                            </>

                                                            <Toaster />
                                                        </RTL>
                                                    </ThemeProvider>
                                                );
                                            }}
                                        </SettingsConsumer>
                                    </SettingsProvider>
                                )}

                            </AuthConsumer>
                        </AuthProvider>
                    </LocalizationProvider>
                    {/* </ReduxProvider> */}

                </CacheProvider >




            </body>
        </html>

    );

};

// Layout.propTypes = {
//     children: PropTypes.node
// };
